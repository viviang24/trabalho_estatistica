---
title: "Manual: Uma Introdução ao Git e Github Além de Conceitos Básicos de Python"
author: "Vívian Germano da Silva"
lang: pt # Linguagem em português
format:
  html:
    theme: default
    toc: true
    grid:
      margin-width: 300px
execute:
  echo: true
reference-location: margin
citation-location: margin
---
# Apresentação 
Este manual irá abordar conceitos iniciais de **Git Github** e **Python** além
de demonstrações das funcionalidades com objetivo de instruir 

# Git e GitHub

## Como surgiu 
***Uma breve História do Git:***

2005: O Git foi criado por Linus Torvalds, o mesmo criador do Linux.

Motivo: O kernel Linux era mantido com um sistema proprietário chamado BitKeeper. Quando a licença foi revogada, a comunidade precisou de uma solução própria.

Linus criou o Git com foco em velocidade, integridade e suporte ao trabalho distribuído.

2006 em diante: Git se tornou o padrão de controle de versão em muitos projetos, especialmente em projetos de código aberto.

***Uma breve História do GitHub:***

2008: Fundado por Tom Preston-Werner, Chris Wanstrath e PJ Hyett.

O objetivo era facilitar o uso do Git com uma interface amigável, e incentivar a colaboração em projetos open-source.

2012: GitHub já era a maior plataforma de código-fonte do mundo.

2018: GitHub foi adquirido pela Microsoft por US$ 7,5 bilhões.

A aquisição gerou desconfiança inicial, mas a Microsoft manteve o GitHub aberto e investiu em melhorias, como o GitHub Copilot e integração com Azure.

::: column-margin
Referências:

[Site oficial do Git](https://github.com/about?locale=pt-BR) 

[História do GitHub - Wikipedia (EN)](https://en.wikipedia.org/wiki/GitHub)

[Entrevista com Linus Torvalds sobre o Git (2007)](https://www.linuxfoundation.org/blog/blog/interview-with-linus-torvalds-about-git/)

[GitHub: About page](https://github.com/about?locale=pt-BR)

[Microsoft adquire GitHub - The Verge (2018)](https://www.theverge.com/2018/6/4/17424472/microsoft-github-acquisition)


:::

## O que são

**Git** é um sistema de controle de versões que permite rastrear mudanças no código.  
**GitHub** é uma plataforma online onde podemos armazenar e compartilhar projetos versionados com Git.



## Para que servem

- Controlar versões do seu código
- Colaborar com outras pessoas
- Armazenar projetos na nuvem (com GitHub)

## Comandos básicos


- git init       
- git add .      
- git commit -m 
- git push       
- git pull       
- git status 
- git diff
- git log 

## Primeiros Passos 

### Onde baixar e como instalar o Git

O `Git` pode ser instalado através do link <https://git-scm.com/downloads>
de acordo com o sistema operacional da sua máquina. 

![website do git](imagens\Captura de tela 2025-07-18 224555.png) 

::: callout-important
*lembre-se de executar como administrador clicando com o botão direito do mouse depois de baixado e seguir as instruções da instalação.*
:::

Agora devemos criar uma conta no Github pelo link <https://github.com>

![início do github](imagens\Captura de tela 2025-07-19 004733.png) 

Em seguida devemos preencher as lacunas seguintes: 

![aba preenchimento do github](imagens/Captura de tela 2025-07-19 003944.png)
 
Depois de preenchido você deve personalizar seu usuário do Github.


# Usando comandos no Git 

Passo 1: 

- Criar uma pasta na sua máquina:

![criando pasta do zero](imagens/Captura%20de%20tela%202025-07-20%20184100.png)

Passo 2:

- Dentro da pasta, clique com o botão direito do mouse e selecione a opção abaixo: 

![abrir o bash do git](imagens/Captura%20de%20tela%202025-07-20%20184546.png)

Passo 3: 

- Após aberto o bash, inicie com os seguintes comandos: 

``` bash 
git config --global user.name "nome de usuário do github"

```

Preencha o campo entre aspas " " e aperte enter e em seguida digite e repita o preenchimento:

``` bash 
git config --global user.emaill "seu emaill usado na conta do github"

```
<br><br>
 Agora iremos seguir na sequência de comandos:
<br><br>
``` bash 
git init 

```
Cria um novo repositório Git no diretório atual.

``` bash 
git status 

```
Mostra o que foi modificado, o que está pronto para commit, e o que ainda não foi adicionado.


``` bash 
git add [arquivo]

```
Adiciona um arquivo específico à área de stage (prepara para commit).


``` bash 
git commit -m 

```
Salva as mudanças com uma mensagem descritiva. É como tirar uma "foto" do projeto nesse momento.


``` bash 
git push 

```
Envia os commits do seu computador para o repositório remoto do Github.  

::: callout-important
Após o "git push" aparecerá uma aba de permissão de conexão com seu Github, confirme ela e abra seu Github para ver seu repositório enviado. 
:::

Se quiser modificar, acompanhar andamento e modificações:
``` bash 
git pull

```
Atualiza seu repositório local com as últimas mudanças do repositório remoto.

``` bash 
git status 

```
Mostra o que foi modificado, o que está pronto para commit, e o que ainda não foi adicionado.

``` bash 
git diff

```
Mostra as diferenças entre os arquivos modificados e os últimos commits.

``` bash 
git log 

```
Mostra o histórico de commits com data, autor e mensagem.
 
*Tudo que estiver dentro da sua pasta será enviado para o Github com comandos específicos de sua precisão.*

  Caso queira voltar algum passo, você pode usar o git log e combinar com o git checkout mais o código hash que ele fornece: 

![comando para o código hash](imagens/Captura%20de%20tela%202025-07-23%20144512b.png)

Pegamos o código fornecido e digitamos o git checkout: 

![código hash](imagens/Captura%20de%20tela%202025-07-23%20144512c.png)

Se por acaso o usuário estiver em outro local com outra máquina ele pode fazer uma clonagem do seu repositório e usar normalmente. 

``` bash 
Git clone 

```
Copia um repositório remoto para seu computador.

No seu Github, terá a opção de copiar código. 

![imagem do Github](imagens/Captura%20de%20tela%202025-07-23%20163129.png)

Depois de copiado, com botão direito do mouse clique em "``Paste``" no seu bash. 


![comando git clone](imagens/Captura%20de%20tela%202025-07-23%20163308.png)

Agora sua pasta estará igual ao do seu repositório.

# Introdução ao Python

O Python é uma linguagem de programção de alto nível, ou seja, de fácil compreensão e próxima da nossa linguagem. 

Com alto desempenho para lidar com manipulações de dados dentro do python é possível encontrar um conjunto de módulos com funcionalidades específicas (bibliotecas) como:

- Pandas
- Numpy
- Matplotlib
- Requests 

Para poder usar o Python, inicialmente teremos que usar o pip.

## Pip

Gerenciador de pacotes do Python, serve para instalar, atualizar ou remover bibliotecas. 

Para instalar os pacotes usamos:

``` bash 
pip install "nome do pacote" 

```

Pode ser utilizado em qualquer terminal do seu computador, basta ter o Python instalado na máquina. 

::: callout-important
*Pip está incluso nas versões a partir de 3.4 do python, caso sua versão seja inferior, será necessário instalar o pip de acordo com o sistema operacional da sua máquina.*
:::

## Primeiros Passos 

### Onde baixar e como instalar o Python 

O Python pode ser baixado através do <https://www.python.org/downloads/> de acordo com o sistema operacional da sua máquina.

![website do Python](imagens/Captura%20de%20tela%202025-07-23%20175458.png)

::: callout-important
*lembre-se de executar como administrador clicando com o botão direito do mouse depois de baixado e seguir as instruções da instalação.*
:::


Se quiser ter um melhor desempenho para manipular os seus dados, será necessário baixar extensões como:

 Anaconda pelo <https://www.anaconda.com/download> e Jupyter pelo <https://jupyter.org/>.  

Para trabalharmos com a linguagem, devemos utilizar um Ambiente de Desenvolvimento Integrado `IDE`. Com ele facilitaremos nossas atividades, com uma melhor visualização e desempenho.

Exemplo de algumas ide:

- Vscode;
- Positron; 
- Jupyter Notebook.

## Entendendo Estrutura de Dados 

Quando trabalhamos com dados é necessário entendermos algumas estruturas para o prosseguimento das análises. 

São exemplos: 

### 1. Int: ``inteiros``:
 Números sem vírgula mais comum na utilização de cálculos inteiros e atribuições.
``` bash 
4 
-50
1000
```
### 2. Float: ``float``:
 Números com vírgula, ou seja, com casas decimais muito usado para cálculos, medições. 
``` bash
8.99
-35.89
0.5
```
### 3. Str: ``strings``:
 Texto entre aspas " ", usado para textos, nomes, frases, palavras e qualquer tipo de dado textual.
``` bash 
"Julia" "cáqui" "olá, tudo bem?"
```
### 4. Bool: ``booleanos``:
 Um valor lógico ``TRUE`` e ``FALSE`` que tem como função responder uma condição.
``` bash 
print( 100 == 5 ) 
print( 6 > 5 )   
```
Saída:

``` bash 
FALSE
TRUE
```
::: {.callout-note}
A função `print("mensagem")` é usada para exibir uma saída no terminal.  
Você pode escrever qualquer valor ou texto dentro dos parênteses e ele será mostrado na tela.
:::

### Operadores Básicos:

| Tipo               | Operador | Descrição                     | Exemplo            | Resultado     |
|--------------------|----------|-------------------------------|--------------------|---------------|
| Aritmético         | `+`      | Soma                          | `2 + 3`            | `5`           |
| Aritmético         | `-`      | Subtração                     | `5 - 1`            | `4`           |
| Aritmético         | `*`      | Multiplicação                 | `4 * 2`            | `8`           |
| Aritmético         | `/`      | Divisão                       | `6 / 2`            | `3.0`         |
| Aritmético         | `//`     | Divisão inteira               | `7 // 2`           | `3`           |
| Aritmético         | `%`      | Resto da divisão              | `7 % 2`            | `1`           |
| Aritmético         | `**`     | Potência                      | `2 ** 3`           | `8`           |
| Comparação         | `==`     | Igual a                       | `3 == 3`           | `True`        |
| Comparação         | `!=`     | Diferente de                  | `4 != 5`           | `True`        |
| Comparação         | `>`      | Maior que                     | `5 > 3`            | `True`        |
| Comparação         | `<`      | Menor que                     | `2 < 4`            | `True`        |
| Comparação         | `>=`     | Maior ou igual                | `4 >= 4`           | `True`        |
| Comparação         | `<=`     | Menor ou igual                | `3 <= 5`           | `True`        |
| Lógico             | `and`    | E lógico                      | `True and False`   | `False`       |
| Lógico             | `or`     | Ou lógico                     | `True or False`    | `True`        |
| Lógico             | `not`    | Negação lógica                | `not True`         | `False`       |
| Atribuição         | `=`      | Atribuição simples            | `x = 5`            | `x = 5`       |
| Atribuição         | `+=`     | Soma e atribuição             | `x += 1`           | `x = x + 1`   |
| Atribuição         | `-=`     | Subtração e atribuição        | `x -= 2`           | `x = x - 2`   |
| Atribuição         | `*=`     | Multiplicação e atribuição    | `x *= 3`           | `x = x * 3`   |
| Atribuição         | `/=`     | Divisão e atribuição          | `x /= 2`           | `x = x / 2`   |
| Atribuição         | `**=`    | Potência e atribuição         | `x **= 2`          | `x = x ** 2`  |

<br>

### Tuples, List e Dict

Vale ressaltar tipos de estruturas ``mutáveis`` que podem ser alterados após criado e ``imutáveis`` nâo recebem alterações após criado. São eles:

- Tuples: Coleções ordenada de valores imutáveis, usamos parênteses ( ):
``` bash 
idades = (3, 90, 100)  
```

- List: Sequência ordenada que pode ter diferentes componentes mutáveis, usamos colchetes [ ]: 
``` bash
time = [ "palmeiras", 12, "maior campeão nacional" ]
``` 

- Dict: Dicionário de coleção de atribuições valor: chave, usamos chaves { }:
``` bash 
empresa = { "id": 02 , "cpf": "000.000.000-00" , "email": "abcdef.gmail.com"}
```
<br><br>
Para começarmos os próximos passos vamos abordar para que servem cada biblioteca citadas mais acima. 

- ``Pandas``: Utilizado para ciência de dados, estatística, análises etc. Podemos fazer filtragens ler dados e organizar até grandes volumes de dados. 

- ``Numpy``: Utilizado em cálculos científicos, machine learning e na álgebra linear. Podemos fazer operações matemáticas com matrizes e vetores. 

- ``Matplotlib``: Mostra dados de forma mais visual juntamente com o ``pandas``. Com ele podemos criar gráficos para melhor visualização. 

- ``Requests``: Utilizado para acessar sites, APIs públicas e automações web. Através dele conseguimos pegar dados da internet via API. 

Todos podem ser baixados em um único comando em qualquer terminal ou prompt da sua máquina:

 ``` bash 
 pip install pandas numpy matplotlib requests

```
Importante lembrar que para começar utilizar essas bibliotecas após o ``pip install`` temos que usar o seguinte comando: 

``` bash 
import pandas 
import numpy 
import matplotlib.pyplot as plt
import requests

```
Podemos renomear bibliotecas abreviando para encurtar códigos utilizando o "``as``" e um apelido para a biblioteca:

``` bash 
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

```
Depois desses passos, estaremos prontos para começar a programar.  

## Estrutura de Controles 

Quando falamos de otmização na programação, podemos nos referir a tipo de estruturas lógicas que nos permitem realizar tarefas eficazmente. 
Dentro do python essas estruturas são usadas para tomar decisões no código, são elas as seguintes: 

### If, Elif, Else, For e While
<br>

- ``if``: Executa enquanto a condição for verdadeira;

- ``elif``: Se precisa de outra condição para ser analisada;

- ``else``: Se nenhuma das condições for verdadeira.

Exemplo:

``` bash 
saldo = 5000.00         # saldo em reais
limite_cheque_especial = 1000.00  # limite extra para saldo negativo
saque = 6000.00         # valor que a pessoa quer sacar

if saque <= saldo:
    print("Saque autorizado! Retire seu dinheiro.")
elif saque <= saldo + limite_cheque_especial:
    print("Saque autorizado usando cheque especial.")
else:
    print("Saldo insuficiente. Saque não autorizado.")
```

Saída: 

``` bash 
Saque autorizado usando cheque especial.
```

Se eu alterar meu saque para um valor maior que meu limite extra:

``` bash
saldo = 5000.00         # saldo em reais
limite_cheque_especial = 1000.00  # limite extra para saldo negativo
saque = 8000.00         # valor que a pessoa quer sacar

if saque <= saldo:
    print("Saque autorizado! Retire seu dinheiro.")
elif saque <= saldo + limite_cheque_especial:
    print("Saque autorizado usando cheque especial.")
else:
    print("Saldo insuficiente. Saque não autorizado.")
```
Saída:

``` bash
Saldo insuficiente. Saque não autorizado.
```
::: {.callout-tip}
Usamos `#` para escrever **comentários** no código.  
Comentários servem como lembretes ou explicações e **não são executados** nem aparecem como saída.

:::

<br>

- ``for``: Usado para repetir algo várias vezes;

Exemplo: 

``` bash 
dias = ["segunda", "terça", "quarta", "quinta", 
        "sexta", "sábado", "domingo"]

print("Dias da semana:")

for dia in dias:    # Para cada dia percorra em 'dias'
    print(dia)
```
Saída: 

``` bash
Dias da semana:
segunda
terça
quarta
quinta
sexta
sábado
domingo
```
- ``while``: Repete enquanto a condição for verdadeira.

``` bash
contador = 1  # Começamos do número 1

# Enquanto o número for menor ou igual a 5, o bloco abaixo será repetido
while contador <= 5:
    print(contador)  # Mostra o número atual no terminal
    contador += 1    # Soma +1 ao contador para ir para o próximo número
```

Saída: 

``` bash
1
2
3
4
5
```

##  Def, Parâmetros e Retorno

### Def 

Usamos ``Def`` para definir uma função, ao criar podemos designar instruções e chamar novamente a função pelo seu nome sempre que quisermos no código.  

``` bash 
# Definindo uma função chamada 'saudar'
def saudar():  # ← def: define a função
    print("Olá, seja bem-vindo!")  # ← instrução dentro da função

# Chamando a função
saudar()  # ← isso executa o que está dentro da função

```
Saída: 

``` bash 
Olá, seja bem-vindo!
```

### Parâmetros

Quando nos referimos a ``parâmetros`` dentro do python, estamos lidando com uma variável que recebe o valor passado na chamada. 

Ainda utilizando o mesmo exemplo da função ``def`` acima, podemos introduzir um parâmetro a ela:

``` bash
# Definindo a função com parâmetro
def saudar(nome):  # def: define a função; 'nome' é o parâmetro
    print("Olá, " + nome + "! Seja bem-vindo!")

# Chamando a função com diferentes nomes
saudar("Maria")
saudar("João")
saudar("Vivian")
```

Saída: 

``` bash 
Olá, Maria! Seja bem-vindo!
Olá, João! Seja bem-vindo!
Olá, Vivian! Seja bem-vindo!
```

### Retorno 

Retorno (``return``) serve para devolver um valor da função, além disso ele armazena, reutiliza e processa os valores, porém para visualiza-lo temos que usar ``print``. Ainda utilizando o mesmo exemplo:

``` bash
# Definindo a função com parâmetro e retorno
def saudar(nome):  # 'nome' é o parâmetro
    return "Olá, " + nome + "! Seja bem-vindo!"  # ← retorna a mensagem

# Chamando a função e armazenando o retorno
mensagem1 = saudar("Maria")
mensagem2 = saudar("João")
mensagem3 = saudar("Vivian")

# Agora exibimos as mensagens com print
print(mensagem1)
print(mensagem2)
print(mensagem3)
```

Saída: 

``` bash 
Olá, Maria! Seja bem-vindo!
Olá, João! Seja bem-vindo!
Olá, Vivian! Seja bem-vindo!
```

