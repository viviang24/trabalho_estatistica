---
title: "Manual: Uma Introdução ao Git e Github Além de Conceitos Básicos de Python"
author: "Vívian Germano da Silva"
lang: pt # Linguagem em português
format:
  html:
    theme: default
    toc: true
    grid:
      margin-width: 300px
execute:
  echo: true
reference-location: margin
citation-location: margin
---
# Apresentação 
Este manual irá abordar conceitos iniciais de **Git Github** e **Python** além
de demonstrações das funcionalidades com objetivo de instruir 

# Git e GitHub

## Como surgiu 
***Uma breve História do Git:***

2005: O Git foi criado por Linus Torvalds, o mesmo criador do Linux.

Motivo: O kernel Linux era mantido com um sistema proprietário chamado BitKeeper. Quando a licença foi revogada, a comunidade precisou de uma solução própria.

Linus criou o Git com foco em velocidade, integridade e suporte ao trabalho distribuído.

2006 em diante: Git se tornou o padrão de controle de versão em muitos projetos, especialmente em projetos de código aberto.

***Uma breve História do GitHub:***

2008: Fundado por Tom Preston-Werner, Chris Wanstrath e PJ Hyett.

O objetivo era facilitar o uso do Git com uma interface amigável, e incentivar a colaboração em projetos open-source.

2012: GitHub já era a maior plataforma de código-fonte do mundo.

2018: GitHub foi adquirido pela Microsoft por US$ 7,5 bilhões.

A aquisição gerou desconfiança inicial, mas a Microsoft manteve o GitHub aberto e investiu em melhorias, como o GitHub Copilot e integração com Azure.

::: column-margin
Referências:

[Site oficial do Git](https://github.com/about?locale=pt-BR) 

[História do GitHub - Wikipedia (EN)](https://en.wikipedia.org/wiki/GitHub)

[Entrevista com Linus Torvalds sobre o Git (2007)](https://www.linuxfoundation.org/blog/blog/interview-with-linus-torvalds-about-git/)

[GitHub: About page](https://github.com/about?locale=pt-BR)

[Microsoft adquire GitHub - The Verge (2018)](https://www.theverge.com/2018/6/4/17424472/microsoft-github-acquisition)


:::

## O que são

**Git** é um sistema de controle de versões que permite rastrear mudanças no código.  
**GitHub** é uma plataforma online onde podemos armazenar e compartilhar projetos versionados com Git.



## Para que servem

- Controlar versões do seu código
- Colaborar com outras pessoas
- Armazenar projetos na nuvem (com GitHub)

## Comandos básicos


- git init       
- git add .      
- git commit -m 
- git push       
- git pull       
- git status 
- git diff
- git log 

# Primeiros Passos 

### Onde baixar e como instalar o Git

O `Git` pode ser instalado através do link <https://git-scm.com/downloads>
de acordo com o sistema operacional da sua máquina. 

![website do git](imagens\Captura de tela 2025-07-18 224555.png) 

::: callout-important
*lembre-se de executar como administrador clicando com o botão direito do mouse depois de baixado e seguir as instruções da instalação.*
:::

Agora devemos criar uma conta no Github pelo link <https://github.com>

![início do github](imagens\Captura de tela 2025-07-19 004733.png) 

Em seguida devemos preencher as lacunas seguintes: 

![aba preenchimento do github](imagens/Captura de tela 2025-07-19 003944.png)
 
Depois de preenchido você deve personalizar seu usuário do Github.


# Usando comandos no Git 

Passo 1: 

- Criar uma pasta na sua máquina:

![criando pasta do zero](imagens/Captura%20de%20tela%202025-07-20%20184100.png)

Passo 2:

- Dentro da pasta, clique com o botão direito do mouse e selecione a opção abaixo: 

![abrir o bash do git](imagens/Captura%20de%20tela%202025-07-20%20184546.png)

Passo 3: 

- Após aberto o bash, inicie com os seguintes comandos: 

``` bash 
git config --global user.name "nome de usuário do github"

```

Preencha o campo entre aspas " " e aperte enter e em seguida digite e repita o preenchimento:

``` bash 
git config --global user.emaill "seu emaill usado na conta do github"

```
<br><br>
 Agora iremos seguir na sequência de comandos:
<br><br>
``` bash 
git init 

```
Cria um novo repositório Git no diretório atual.

``` bash 
git status 

```
Mostra o que foi modificado, o que está pronto para commit, e o que ainda não foi adicionado.


``` bash 
git add [arquivo]

```
Adiciona um arquivo específico à área de stage (prepara para commit).


``` bash 
git commit -m 

```
Salva as mudanças com uma mensagem descritiva. É como tirar uma "foto" do projeto nesse momento.


``` bash 
git push 

```
Envia os commits do seu computador para o repositório remoto do Github.  

::: callout-important
Após o "git push" aparecerá uma aba de permissão de conexão com seu Github, confirme ela e abra seu Github para ver seu repositório enviado. 
:::

Se quiser modificar, acompanhar andamento e modificações:
``` bash 
git pull

```
Atualiza seu repositório local com as últimas mudanças do repositório remoto.

``` bash 
git status 

```
Mostra o que foi modificado, o que está pronto para commit, e o que ainda não foi adicionado.

``` bash 
git diff

```
Mostra as diferenças entre os arquivos modificados e os últimos commits.

``` bash 
git log 

```
Mostra o histórico de commits com data, autor e mensagem.
 
*Tudo que estiver dentro da sua pasta será enviado para o Github com comandos específicos de sua precisão.*

 



